"use strict";angular.module("angularPoint").directive("apInputGroup",["_","apCacheService",function(a,b){return{scope:{cols:"=?",description:"=?",entity:"=?",fieldDefinition:"=?",fieldName:"=?",groupClass:"=?",label:"=?",ngDisabled:"=?",validation:"=?"},restrict:"A",transclude:!0,templateUrl:"src/apInputGroup.html",link:function(c){function d(){var b=n.groupClass||e();n.inputGroupClass=a.isFunction(b)?b():b}function e(){var a=n.cols||l;return"col-sm-"+a}function f(c){if(!n.lookupOptions){var d=n.List;d&&(n.lookupOptions=b.getCachedEntities(d),a.isFunction(n.lookupFilter)&&(n.lookupOptions=n.lookupFilter(c,lookupOptions)))}n.lookupArray=a.isArray(n.lookupOptions)?n.lookupOptions:a.toArray(n.lookupOptions)}function g(a,b){if(!a||!b)throw new Error("An entity and fieldName are both required on the directive ifa fieldDefinition isn't specified.");return a.getFieldDefinition(b)}function h(b){if(n.validation&&a.isFunction(n.validation)){var c=b||"";return n.validation(c,n.entity,n.fieldName)}return!0}function i(b){return b?a.isDate(b):!0}var j=c.fieldDefinition||g(c.entity,c.fieldName);if(!a.isObject(j))throw new Error("apInputGroup requires a valid field definition object",c);var k=[d],l=3,m={columns:l,contentUrl:"",description:null,disabled:!1,inputGroupClass:"col-sm-3",label:j.label||j.DisplayName,lookupField:"title",maxlength:void 0,minlength:void 0,placeholder:null,required:!1,rows:6,validationMessage:""};switch(j.objectType){case"Boolean":m.contentUrl="src/apInputControl.Boolean.html";break;case"Choice":m.contentUrl="src/apInputControl.Choice.html";break;case"DateTime":m.contentUrl="src/apInputControl.Date.html",m.validation=m.validation||i,m.validationMessage="Please enter a valid date.";break;case"HTML":m.contentUrl="src/apInputControl.HTML.html",l=12;break;case"Integer":case"Number":m.contentUrl="src/apInputControl.Number.html",m.validationMessage="Not a valid number!";break;case"Lookup":k.push(function(){f(n.entity)}),m.contentUrl="src/apInputControl.Lookup.html";break;case"LookupMulti":k.push(function(){n.entity[n.fieldName]=n.entity[n.fieldName]||[],f(n.entity)}),m.contentUrl="src/apInputControl.LookupMulti.html";break;case"MultiChoice":m.contentUrl="src/apInputControl.MultiChoice.html";break;case"Note":l=12,m.contentUrl="src/apInputControl.Note.html";break;default:m.contentUrl="src/apInputControl.Text.html"}var n=a.extend({},m,j,c);if(!a.isString(n.fieldName))throw new Error("Field name is either undefined or not a string.  Ensure you place apostrophe's inside the quotes when identifying data-field-name.");c.options=n,c.validate=h,a.isFunction(n.groupClass)&&c.$watch("entity."+n.fieldName,function(){d()}),!n.entity[n.fieldName]&&n.Default&&(n.entity[n.fieldName]=n.Default),a.each(k,function(a){a()})}}}]),angular.module("angularPoint").directive("apInputRow",["_",function(a){return{scope:{entity:"=",fields:"=",containerClass:"=",ngDisabled:"="},restrict:"A",transclude:!0,templateUrl:"src/apInputRow.html",link:function(b){b.fieldNameArray=a.isArray(b.fields)?b.fields:[b.fields],b.state={containerClass:b.containerClass||"row"}}}}]),angular.module("angularPoint").run(["$templateCache",function(a){a.put("src/apInputControl.Boolean.html",'<button class="btn btn-link" ng-click="options.entity[options.fieldName] = !options.entity[options.fieldName]" ui-validate="\'validate($value)\'" ng-disabled=options.disabled ui-validate="\'validate($value)\'"><i class="fa fa-2x {{ options.entity[options.fieldName] ? \'fa-check-square-o\' : \'fa-square-o\' }}"></i></button>'),a.put("src/apInputControl.Choice.html",'<select class=form-control ng-required=options.required ui-validate="\'validate($value)\'" placeholder="{{ options.placeholder }}" ng-disabled=options.disabled ng-model=options.entity[options.fieldName] ui-validate="\'validate($value)\'" ng-options="choice for choice in options.Choices"></select>'),a.put("src/apInputControl.Date.html",'<input ui-date class=form-control ui-validate="\'validate($value)\'" ng-required=options.required ng-disabled=options.disabled placeholder="{{ options.placeholder }}" ng-model=options.entity[options.fieldName]>'),a.put("src/apInputControl.HTML.html",'<div text-angular ng-required=options.required ui-validate="\'validate($value)\'" name="{{ options.fieldName }}" ta-disabled=options.disabled placeholder={{options.placeholder}} ng-model=options.entity[options.fieldName]></div>'),a.put("src/apInputControl.Lookup.html","<div ui-select ng-model=options.entity[options.fieldName] ng-required=options.required ng-disabled=options.disabled><div ui-select-match placeholder=\"{{ options.placeholder }}\">{{ $select.selected[options.lookupField] }}</div><div ui-select-choices data-repeat=\"{'lookupId': lookup.id, 'lookupValue': lookup[options.lookupField]} as\nlookup in options.lookupArray track by lookup.id \">{{ lookup[options.lookupField] }}</div></div>"),a.put("src/apInputControl.LookupMulti.html","<div ui-select multiple ng-model=options.entity[options.fieldName] ui-validate=\"'validate($value)'\" ng-required=options.required ng-disabled=options.disabled><div ui-select-match placeholder=\"{{ options.placeholder }}\">{{ $item[options.lookupField] }}</div><div ui-select-choices data-repeat=\"{'lookupId': lookup.id, 'lookupValue': lookup[options.lookupField]} as\n    lookup in options.lookupArray track by lookup.id \">{{ lookup[options.lookupField] }}</div></div>"),a.put("src/apInputControl.MultiChoice.html",'<div ui-select multiple ng-required=options.required ui-validate="\'validate($value)\'" ng-disabled=options.disabled ng-model=options.entity[options.fieldName] class=form-control><div ui-select-match placeholder="{{ options.placeholder }}">{{ $item }}</div><div ui-select-choices data-repeat="choice in options.Choices">{{ choice }}</div></div>'),a.put("src/apInputControl.Note.html","<textarea ng-model=options.entity[options.fieldName] ui-validate=\"'validate($value)'\" class=form-control rows={{options.rows}} ng-required=options.required ng-disabled=options.disabled placeholder={{options.placeholder}}>\n</textarea>"),a.put("src/apInputControl.Number.html","<input type=number class=form-control ui-validate=\"'validate($value)'\" ng-model=options.entity[options.fieldName] ng-required=options.required ng-disabled=options.disabled min={{options.min}} max={{options.max}} placeholder={{options.placeholder}}>"),a.put("src/apInputControl.Text.html",'<input class=form-control ui-validate="\'validate($value)\'" ng-model=options.entity[options.fieldName] ng-required=options.required ng-disabled=options.disabled ng-minlength="{{ options.minlength }}" ng-maxlength="{{ options.maxlength }}" placeholder={{options.placeholder}}>'),a.put("src/apInputGroup.html","<div class={{options.inputGroupClass}} ng-form=apInput><div class=form-group title={{options.description}} ng-class=\"{'has-error': apInput.$invalid}\"><label class=control-label>{{ options.label }} {{options.required ? '*' : ''}}</label><div ng-include=options.contentUrl ng-disabled=ngDisabled></div><span class=text-danger ng-if=apInput.$invalid>{{ options.validationMessage }}</span></div></div>"),a.put("src/apInputRow.html",'<div class="{{ options.containerClass }}"><div ng-repeat="fieldName in fieldNameArray" ap-input-group data-entity=entity data-field-name=fieldName></div></div>')}]);